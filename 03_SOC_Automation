# SOC Automation Scripts

## Overview
Security Operations Centers (SOCs) rely on **automation** to improve response times, reduce manual effort, and enhance efficiency. These scripts automate **incident detection, containment, remediation, and auditing** to ensure compliance with security standards.

The automation aligns with **NIST 800-61, MITRE ATT&CK, CIS Controls, ISO 27001, PCI DSS, and GDPR** best practices.

This document contains **Python, PowerShell, and Ansible scripts** for **investigation and response** to various SOC security threats, including:
- **Ransomware** (Detection, isolation, and double extortion prevention)
- **Supply Chain Attacks** (Monitoring and anomaly detection in software updates)
- **Phishing & Social Engineering** (Automated email analysis, user alerting)
- **Attacks on Healthcare** (HIPAA compliance security monitoring)
- **Cloud-Based Attacks** (Cloud security logging and access anomaly detection)
- **Attacks on Financial Institutions** (Fraud detection, financial data monitoring)
- **Zero-Day Exploits** (Automated threat intelligence and IOC correlation)
- **DDoS Attacks** (Mitigation and anomaly-based traffic filtering)
- **Cryptocurrency Theft** (Wallet activity monitoring, fraud detection)
- **AI-Powered Attacks** (Anomaly-based AI threat detection)
- **Insider Threats** (Privileged access monitoring, user behavior analytics)
- **SIM Swapping** (Telecom fraud detection, unauthorized SIM change alerts)
- **Mobile Device Attacks** (Mobile security logging, malware detection)
- **IoT Attacks** (IoT anomaly detection, unauthorized device tracking)
- **SQL Injection Attacks** (Database security monitoring, query anomaly detection)
- **Cross-Site Scripting (XSS) Attacks** (Web security logging and response)
- **Brute-Force Attacks** (Account lockout policies, honeypot defenses)
- **DNS Spoofing** (DNS integrity validation, logging, and response)
- **Eavesdropping Attacks** (TLS monitoring, network integrity validation)
- **Session Hijacking** (User session monitoring, automatic invalidation)

---

## **1. Ransomware Investigation & Response**

### **Objective**
Detect and isolate ransomware before encryption spreads.

### **Python Script: Monitor for Suspicious File Encryption**
```python
import os
import hashlib
watched_dir = "/var/log/ransomware"
for file in os.listdir(watched_dir):
    with open(file, 'rb') as f:
        file_hash = hashlib.md5(f.read()).hexdigest()
    if file_hash in known_ransomware_hashes:
        print(f"[ALERT] Ransomware activity detected on {file}")
```

### **Ansible Playbook: Automatically Isolate Infected Hosts**
```yaml
- name: Isolate infected endpoint
  hosts: soc_managed_endpoints
  tasks:
    - name: Disable network interface
      shell: "nmcli networking off"
    - name: Apply firewall rules to block external communication
      iptables:
        chain: INPUT
        protocol: all
        source: "{{ inventory_hostname }}"
        jump: DROP
```

---

## **2. Supply Chain Attack Investigation & Response**

### **Python Script: Monitor for Unauthorized Software Updates**
```python
import os
import hashlib
trusted_hashes = {"software_update.pkg": "a1b2c3d4e5"}
file_to_check = "software_update.pkg"
with open(file_to_check, 'rb') as f:
    file_hash = hashlib.md5(f.read()).hexdigest()
if file_hash != trusted_hashes[file_to_check]:
    print(f"[ALERT] Unauthorized modification detected in {file_to_check}")
```

---

## **3. Phishing Attack Investigation & Response**

### **PowerShell Script: Quarantine Suspicious Emails**
```powershell
$EmailSubject = "URGENT: Action Required"
Connect-ExchangeOnline -UserPrincipalName socadmin@example.com
Search-Mailbox -SearchQuery "Subject:$EmailSubject" -TargetMailbox soc_quarantine@example.com -DeleteContent
```

### **Python Script: Automate Phishing IOC Reporting**
```python
import requests
phishing_ioc = {"domain": "malicious-phishing.com", "type": "url"}
api_url = "https://threatintel.example.com/api/upload"
response = requests.post(api_url, json=phishing_ioc)
print(f"IOC Submitted: {phishing_ioc['domain']} - Status: {response.status_code}")
```

---

## **4. DDoS Attack Investigation & Response**

### **Ansible Playbook: Block Malicious IPs Using Firewall Rules**
```yaml
- name: Block suspected DDoS IP addresses
  hosts: firewalls
  tasks:
    - name: Add malicious IPs to firewall blocklist
      iptables:
        chain: INPUT
        source: "192.168.1.100"
        jump: DROP
```

---

## **5. Insider Threat Investigation & Response**

### **PowerShell Script: Detect Suspicious User Behavior in Active Directory**
```powershell
$LastLogons = Get-ADUser -Filter * -Properties LastLogonTimestamp | Where-Object { $_.LastLogonTimestamp -lt (Get-Date).AddDays(-30) }
Write-Output "Inactive Accounts: $LastLogons"
```

### **Python Script: Identify Unauthorized Data Exfiltration**
```python
import psutil
suspicious_ports = [21, 22, 445]
for conn in psutil.net_connections():
    if conn.laddr.port in suspicious_ports:
        print(f"[ALERT] Possible data exfiltration attempt detected: {conn.laddr}")
```

---

## **Security Standards Alignment**

| **Framework** | **Automation Use Case** |
|-----------------|-------------------------|
| **NIST 800-61** | Automated Incident Handling |
| **MITRE ATT&CK** | Tactic: Execution (T1059), Defense Evasion (T1562) |
| **CIS Controls** | Continuous Monitoring & Response |
| **ISO 27001** | Security Incident Response Automation |
| **PCI DSS** | Log Auditing & Compliance Enforcement |
| **GDPR** | Data Access Auditing & Protection |

---

## **Next Steps**
âœ… **Operational Procedures:** Define **MTTD, MTTR, escalation policies, and KPIs**.
âœ… **Threat Hunting Frameworks:** Build queries for **Splunk, CrowdStrike, and Elastic**.

ðŸš€ *Let me know if you need additional refinements before proceeding!*
